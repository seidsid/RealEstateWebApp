// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NurRealEstateWebApp.Models;

#nullable disable

namespace NurRealEstateWebApp.Migrations
{
    [DbContext(typeof(NurDbContext))]
    [Migration("20240201162623_Second Migration")]
    partial class SecondMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NurRealEstateWebApp.Entities.Account", b =>
                {
                    b.Property<Guid>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("account_id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("role");

                    b.HasKey("AccountId")
                        .HasName("PRIMARY");

                    b.ToTable("account", (string)null);
                });

            modelBuilder.Entity("NurRealEstateWebApp.Entities.Address", b =>
                {
                    b.Property<Guid>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("address_id");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("city");

                    b.Property<string>("HouseNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("house_no");

                    b.Property<string>("SubCity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("sub_city");

                    b.HasKey("AddressId")
                        .HasName("PRIMARY");

                    b.ToTable("address", (string)null);
                });

            modelBuilder.Entity("NurRealEstateWebApp.Entities.Admin", b =>
                {
                    b.Property<Guid>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("admin_id");

                    b.Property<Guid>("account_id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("contact_id")
                        .HasColumnType("char(36)");

                    b.HasKey("AdminId")
                        .HasName("PRIMARY");

                    b.HasIndex("account_id")
                        .IsUnique();

                    b.HasIndex("contact_id")
                        .IsUnique();

                    b.ToTable("admin", (string)null);
                });

            modelBuilder.Entity("NurRealEstateWebApp.Entities.Agent", b =>
                {
                    b.Property<Guid>("AgentId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("agent_id");

                    b.Property<DateTime>("ExperienceSince")
                        .HasColumnType("datetime")
                        .HasColumnName("experience_since");

                    b.Property<string>("Languages")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("languages");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nationality");

                    b.Property<Guid>("account_id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("admin_id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("contact_id")
                        .HasColumnType("char(36)");

                    b.HasKey("AgentId")
                        .HasName("PRIMARY");

                    b.HasIndex("account_id")
                        .IsUnique();

                    b.HasIndex("admin_id");

                    b.HasIndex("contact_id")
                        .IsUnique();

                    b.ToTable("agent", (string)null);
                });

            modelBuilder.Entity("NurRealEstateWebApp.Entities.Contact", b =>
                {
                    b.Property<Guid>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("contact_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("PhoneNo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("phone_no");

                    b.Property<string>("WhatsappNo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("whatsapp_no");

                    b.HasKey("ContactId")
                        .HasName("PRIMARY");

                    b.ToTable("contact", (string)null);
                });

            modelBuilder.Entity("NurRealEstateWebApp.Entities.Property", b =>
                {
                    b.Property<Guid>("PropertyId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("property_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<bool>("HasMaidsRoom")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("has_maidsRoom");

                    b.Property<DateTime>("ListedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("listed_date");

                    b.Property<int>("NoBathrooms")
                        .HasColumnType("int(11)")
                        .HasColumnName("no_bathrooms");

                    b.Property<int>("NoBedrooms")
                        .HasColumnType("int(11)")
                        .HasColumnName("no_bedrooms");

                    b.Property<int>("NoParking")
                        .HasColumnType("int(11)")
                        .HasColumnName("no_parking");

                    b.Property<float>("Price")
                        .HasColumnType("float")
                        .HasColumnName("price");

                    b.Property<int>("PropertySize")
                        .HasColumnType("int(11)")
                        .HasColumnName("property_size");

                    b.Property<string>("PropertyType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("property_type");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.Property<Guid>("address_id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("agent_id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("user_id")
                        .HasColumnType("char(36)");

                    b.HasKey("PropertyId")
                        .HasName("PRIMARY");

                    b.HasIndex("address_id")
                        .IsUnique();

                    b.HasIndex("agent_id");

                    b.HasIndex("user_id");

                    b.ToTable("property", (string)null);
                });

            modelBuilder.Entity("NurRealEstateWebApp.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.Property<Guid>("account_id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("contact_id")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId")
                        .HasName("PRIMARY");

                    b.HasIndex("account_id")
                        .IsUnique();

                    b.HasIndex("contact_id")
                        .IsUnique();

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("NurRealEstateWebApp.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NurRealEstateWebApp.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NurRealEstateWebApp.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NurRealEstateWebApp.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NurRealEstateWebApp.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NurRealEstateWebApp.Entities.Admin", b =>
                {
                    b.HasOne("NurRealEstateWebApp.Entities.Account", "Account")
                        .WithOne()
                        .HasForeignKey("NurRealEstateWebApp.Entities.Admin", "account_id")
                        .IsRequired()
                        .HasConstraintName("admin_ibfk_3");

                    b.HasOne("NurRealEstateWebApp.Entities.Contact", "Contact")
                        .WithOne()
                        .HasForeignKey("NurRealEstateWebApp.Entities.Admin", "contact_id")
                        .IsRequired()
                        .HasConstraintName("admin_ibfk_1");

                    b.Navigation("Account");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("NurRealEstateWebApp.Entities.Agent", b =>
                {
                    b.HasOne("NurRealEstateWebApp.Entities.Account", "Account")
                        .WithOne()
                        .HasForeignKey("NurRealEstateWebApp.Entities.Agent", "account_id")
                        .IsRequired()
                        .HasConstraintName("agent_ibfk_3");

                    b.HasOne("NurRealEstateWebApp.Entities.Admin", "Admin")
                        .WithMany("Agents")
                        .HasForeignKey("admin_id")
                        .IsRequired()
                        .HasConstraintName("agent_ibfk_4");

                    b.HasOne("NurRealEstateWebApp.Entities.Contact", "Contact")
                        .WithOne()
                        .HasForeignKey("NurRealEstateWebApp.Entities.Agent", "contact_id")
                        .IsRequired()
                        .HasConstraintName("agent_ibfk_1");

                    b.Navigation("Account");

                    b.Navigation("Admin");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("NurRealEstateWebApp.Entities.Property", b =>
                {
                    b.HasOne("NurRealEstateWebApp.Entities.Address", "Address")
                        .WithOne()
                        .HasForeignKey("NurRealEstateWebApp.Entities.Property", "address_id")
                        .IsRequired()
                        .HasConstraintName("property_ibfk_3");

                    b.HasOne("NurRealEstateWebApp.Entities.Agent", "Agent")
                        .WithMany("Properties")
                        .HasForeignKey("agent_id")
                        .IsRequired()
                        .HasConstraintName("property_ibfk_2");

                    b.HasOne("NurRealEstateWebApp.Entities.User", "User")
                        .WithMany("Properties")
                        .HasForeignKey("user_id")
                        .IsRequired()
                        .HasConstraintName("property_ibfk_1");

                    b.Navigation("Address");

                    b.Navigation("Agent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NurRealEstateWebApp.Entities.User", b =>
                {
                    b.HasOne("NurRealEstateWebApp.Entities.Account", "Account")
                        .WithOne()
                        .HasForeignKey("NurRealEstateWebApp.Entities.User", "account_id")
                        .IsRequired()
                        .HasConstraintName("user_ibfk_2");

                    b.HasOne("NurRealEstateWebApp.Entities.Contact", "Contact")
                        .WithOne()
                        .HasForeignKey("NurRealEstateWebApp.Entities.User", "contact_id")
                        .IsRequired()
                        .HasConstraintName("user_ibfk_3");

                    b.Navigation("Account");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("NurRealEstateWebApp.Entities.Admin", b =>
                {
                    b.Navigation("Agents");
                });

            modelBuilder.Entity("NurRealEstateWebApp.Entities.Agent", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("NurRealEstateWebApp.Entities.User", b =>
                {
                    b.Navigation("Properties");
                });
#pragma warning restore 612, 618
        }
    }
}
